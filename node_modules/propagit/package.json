{
  "name": "propagit",
  "description": "cascading multi-server git deployment",
  "version": "0.6.4",
  "repository": {
    "type": "git",
    "url": "git://github.com/substack/propagit.git"
  },
  "main": "index.js",
  "bin": {
    "propagit": "bin/cli.js"
  },
  "keywords": [
    "git",
    "deploy",
    "multi-server",
    "cluster"
  ],
  "directories": {
    "lib": ".",
    "example": "example",
    "test": "test"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "dependencies": {
    "optimist": "~0.3.4",
    "upnode": "~0.3.1",
    "pushover": "~0.1.4",
    "mkdirp": "~0.3.3"
  },
  "devDependencies": {
    "tap": "~0.2.3"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "license": "MIT",
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "readme": "propagit\n========\n\nCascading multi-server git deployment.\n\n[![build status](https://secure.travis-ci.org/substack/propagit.png)](http://travis-ci.org/substack/propagit)\n\nexample\n=======\n\nFirst start up a hub server to listen for git deploys:\n\n    $ propagit hub --port=6000 --secret=beepboop\n    control service listening on :6000\n    git service listening on :6001\n\nthen spin up as many drones as necessary on other machines\nwith the command to run on deployment for each type of service:\n\n    $ propagit drone --hub=hubhost:6000 --secret=beepboop\n\nNow you can `git push` to the hub and the drones will `git fetch` from the hub.\nJust do:\n\n    $ cd ~/projects/somerepo\n    $ git push http://hubhost:6001/somerepo master\n\nFirst deploy the code to a fresh deploy directory for the given repo name and\ncommit hash:\n\n    $ propagit deploy --hub=hubhost:6000 --secret=beepboop \\\n      somerepo ed56c6e85731d412fe22cf437cb63130afc34b07\n\nthen spawn processes for that deployment:\n\n    $ propagit spawn --hub=hubhost:6000 --secret=beepboop \\\n      somerepo ed56c6e85731d412fe22cf437cb63130afc34b07 \\\n      -- node server.js 8085\n\nusage\n=====\n\n```\nUsage:\n  propagit OPTIONS hub\n\n    Create a server to coordinate drones.\n\n    --port       port to listen on\n    --secret     password to use\n    --basedir    directory to put repositories\n\n  propagit OPTIONS drone\n\n    Listen to the hub for deploy events to execute commands with\n    environment variables $REPO and $COMMIT set on each deploy.\n \n    --hub        connect to the hub host:port\n    --secret     password to use\n    --basedir    directory to put repositories and deploys in\n  \n  propagit OPTIONS deploy REPO COMMIT\n  \n    Deploy COMMIT to all of the drones listening to the hub.\n\n    --hub        connect to the hub host:port\n    --secret     password to use\n  \n  propagit OPTIONS spawn REPO COMMIT [COMMAND...]\n  \n    Run COMMAND on all the drones specified by OPTIONS.\n    $PROCESS_ID and $DRONE_ID will be set for every spawned process.\n    Note that $PROCESS_ID is not the system PID value.\n\n  propagit OPTIONS ps\n  \n    List all the running processes on all the drones.\n```\n\nmethods\n=======\n\nvar propagit = require('propagit')\n\nvar p = propagit(opts)\n----------------------\n\nCreate a new propagit object with `opts`:\n\n* secret - authenticate with this passphrase\n* hub - if specified, connect to this hub\n\np.drone()\n---------\n\nRegister with the connected hub as a drone.\n\np.listen(controlPort, gitPort)\n------------------------------\n\nCreate a new hub on `controlPort` and start a git http server on `gitPort`.\n\np.use(fn)\n---------\n\nModify the dnode server or client service with `fn(service)`.\n\nIn server mode the `fn` also gets a `conn` object: `fn(service, conn)`.\n\ninstall\n=======\n\nWith [npm](http://npmjs.org) do:\n\n    npm install -g propagit\n",
  "readmeFilename": "README.markdown",
  "bugs": {
    "url": "https://github.com/substack/propagit/issues"
  },
  "homepage": "https://github.com/substack/propagit",
  "_id": "propagit@0.6.4",
  "_from": "propagit@~0.6.4"
}
